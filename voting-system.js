// Sistema de Votaci√≥n Interactiva para "El Cazador de Medianoche"
// Maneja las decisiones del lector y la navegaci√≥n entre ramas narrativas

class VotingSystem {
    constructor() {
        this.decisions = this.loadDecisions();
        this.currentDecision = 1;
        this.init();
    }

    // Cargar decisiones previas del localStorage
    loadDecisions() {
        const saved = localStorage.getItem('cazadorMedianoche_decisions');
        return saved ? JSON.parse(saved) : {};
    }

    // Guardar decisiones en localStorage
    saveDecisions() {
        localStorage.setItem('cazadorMedianoche_decisions', JSON.stringify(this.decisions));
    }

    // Inicializar el sistema
    init() {
        this.createDecisionInterface();
        this.updateProgressIndicator();
        this.addResetButton();
    }

    // Crear la interfaz de votaci√≥n
    createDecisionInterface() {
        const decisionContainer = document.getElementById('decision-container');
        if (!decisionContainer) return;

        // Para seccion-01.html, necesitamos manejar dos decisiones secuenciales
        const currentPage = window.location.pathname.split('/').pop();
        if (currentPage === 'seccion-01.html') {
            this.createSequentialDecisions();
            return;
        }

        const decisionData = this.getDecisionData();
        if (!decisionData) return;

        decisionContainer.innerHTML = `
            <div class="voting-section">
                <div class="decision-header">
                    <h3>üåô Decisi√≥n ${decisionData.number}</h3>
                    <p class="decision-context">${decisionData.context}</p>
                </div>
                
                <div class="decision-question">
                    <p class="question-text">${decisionData.question}</p>
                </div>

                <div class="decision-options">
                    <button class="option-button option-a" onclick="votingSystem.makeDecision('a')">
                        <span class="option-label">Opci√≥n A</span>
                        <span class="option-text">${decisionData.optionA}</span>
                    </button>
                    
                    <button class="option-button option-b" onclick="votingSystem.makeDecision('b')">
                        <span class="option-label">Opci√≥n B</span>
                        <span class="option-text">${decisionData.optionB}</span>
                    </button>
                </div>

                <div class="decision-impact">
                    <details>
                        <summary>üí° Ver posible impacto de esta decisi√≥n</summary>
                        <p>${decisionData.impact}</p>
                    </details>
                </div>
            </div>
        `;
    }

    // Crear interfaz para decisiones secuenciales (seccion-01.html)
    createSequentialDecisions() {
        const decisionContainer = document.getElementById('decision-container');
        
        if (!this.decisions[1]) {
            // Mostrar decisi√≥n 1
            const decision1 = this.getDecisionData(1);
            decisionContainer.innerHTML = `
                <div class="voting-section">
                    <div class="decision-header">
                        <h3>üåô Decisi√≥n ${decision1.number}</h3>
                        <p class="decision-context">${decision1.context}</p>
                    </div>
                    
                    <div class="decision-question">
                        <p class="question-text">${decision1.question}</p>
                    </div>

                    <div class="decision-options">
                        <button class="option-button option-a" onclick="votingSystem.makeSequentialDecision(1, 'a')">
                            <span class="option-label">Opci√≥n A</span>
                            <span class="option-text">${decision1.optionA}</span>
                        </button>
                        
                        <button class="option-button option-b" onclick="votingSystem.makeSequentialDecision(1, 'b')">
                            <span class="option-label">Opci√≥n B</span>
                            <span class="option-text">${decision1.optionB}</span>
                        </button>
                    </div>

                    <div class="decision-impact">
                        <details>
                            <summary>üí° Ver posible impacto de esta decisi√≥n</summary>
                            <p>${decision1.impact}</p>
                        </details>
                    </div>
                </div>
            `;
        } else if (!this.decisions[2]) {
            // Mostrar decisi√≥n 2
            const decision2 = this.getDecisionData(2);
            decisionContainer.innerHTML = `
                <div class="voting-section">
                    <div class="decision-header">
                        <h3>üåô Decisi√≥n ${decision2.number}</h3>
                        <p class="decision-context">${decision2.context}</p>
                        <p style="color: #cd853f; font-style: italic;">Decisi√≥n previa: ${this.decisions[1] === 'a' ? 'Confianza total' : 'Cautela vigilante'}</p>
                    </div>
                    
                    <div class="decision-question">
                        <p class="question-text">${decision2.question}</p>
                    </div>

                    <div class="decision-options">
                        <button class="option-button option-a" onclick="votingSystem.makeSequentialDecision(2, 'a')">
                            <span class="option-label">Opci√≥n A</span>
                            <span class="option-text">${decision2.optionA}</span>
                        </button>
                        
                        <button class="option-button option-b" onclick="votingSystem.makeSequentialDecision(2, 'b')">
                            <span class="option-label">Opci√≥n B</span>
                            <span class="option-text">${decision2.optionB}</span>
                        </button>
                    </div>

                    <div class="decision-impact">
                        <details>
                            <summary>üí° Ver posible impacto de esta decisi√≥n</summary>
                            <p>${decision2.impact}</p>
                        </details>
                    </div>
                </div>
            `;
        } else {
            // Ambas decisiones tomadas, mostrar resumen y navegar
            this.showSequentialComplete();
        }
    }

    // Manejar decisiones secuenciales
    makeSequentialDecision(decisionNumber, choice) {
        this.decisions[decisionNumber] = choice;
        this.saveDecisions();
        
        if (decisionNumber === 1) {
            // Mostrar decisi√≥n 2
            setTimeout(() => {
                this.createSequentialDecisions();
            }, 1000);
        } else if (decisionNumber === 2) {
            // Ambas decisiones completadas, navegar
            setTimeout(() => {
                this.navigateToNextSection();
            }, 2000);
        }
        
        // Mostrar confirmaci√≥n temporal
        this.showDecisionConfirmation(choice);
    }

    // Mostrar resumen de decisiones secuenciales completadas
    showSequentialComplete() {
        const decisionContainer = document.getElementById('decision-container');
        const route = this.decisions[1] + this.decisions[2];
        const routeDescriptions = {
            'aa': 'Confianza Total + Zorros Plateros',
            'ab': 'Confianza Total + Murci√©lagos Bibliotecarios',
            'ba': 'Cautela Vigilante + Zorros Plateros', 
            'bb': 'Cautela Vigilante + Murci√©lagos Bibliotecarios'
        };

        decisionContainer.innerHTML = `
            <div class="decision-confirmation">
                <div class="confirmation-icon">‚ú®</div>
                <h3>Decisiones Completadas</h3>
                <p><strong>Tu camino elegido:</strong> ${routeDescriptions[route]}</p>
                <p>La historia continuar√° seg√∫n tus decisiones...</p>
                <div class="loading-indicator">
                    <div class="loading-bar"></div>
                </div>
            </div>
        `;
        
        setTimeout(() => {
            this.navigateToNextSection();
        }, 2000);
    }

    // Obtener datos de la decisi√≥n actual
    getDecisionData(decisionNumber = null) {
        const decisionsData = {
            1: {
                number: 1,
                context: "Final del Cap√≠tulo 1 - Primer encuentro con Seraphina",
                question: "Axel observa a Seraphina herida. Su instinto le dice que algo no est√° bien, pero ella parece genuinamente desesperada. ¬øQu√© deber√≠a hacer?",
                optionA: "Confiar y ayudar inmediatamente",
                optionB: "Ayudar pero mantenerse alerta",
                impact: "Esta decisi√≥n determina qu√© tan efectivas son las manipulaciones de Seraphina y cu√°nta informaci√≥n personal comparte Axel."
            },
            2: {
                number: 2,
                context: "Entre Cap√≠tulos 2 y 3 - Camino hacia las Cuevas Brillantes",
                question: "En su camino hacia las Cuevas Brillantes, Axel y Seraphina se topan con dos senderos. ¬øQu√© ruta elegir?",
                optionA: "Aldea de los Zorros Plateros (neutral pero desconfiados)",
                optionB: "Territorio de los Murci√©lagos Bibliotecarios (sabios pero exigentes)",
                impact: "Esta decisi√≥n afecta las herramientas y conocimientos que Axel obtiene para los desaf√≠os posteriores."
            },
            "2b": {
                number: "2B",
                context: "Entre Cap√≠tulos 3 y 4 - Despu√©s de obtener las L√°grimas de Cristal",
                question: "En el camino hacia el Bosque de Cuervos, Axel escucha una melod√≠a familiar de flauta que solo su hermano Ember conoce. La m√∫sica parece venir de un valle lateral. ¬øDeber√≠a investigar el sonido y desviarse de la ruta, o continuar seg√∫n el plan?",
                optionA: "Investigar la melod√≠a (Buscar a Ember)",
                optionB: "Continuar la misi√≥n (Sin Ember)",
                impact: "Esta decisi√≥n determina si Ember se une al grupo, cambiando completamente las din√°micas posteriores y las estrategias contra Seraphina."
            },
            3: {
                number: 3,
                context: "Final del Cap√≠tulo 4 - Despu√©s de la revelaci√≥n de Lyra",
                question: "Lyra ha revelado la verdad sobre Seraphina. Axel debe decidir c√≥mo proceder con esta informaci√≥n devastadora.",
                optionA: "Confrontar a Seraphina directamente",
                optionB: "Seguir el juego y espiar sus movimientos",
                impact: "Esta decisi√≥n define completamente los Cap√≠tulos 5-6, desde batallas inmediatas hasta infiltraci√≥n."
            },
            4: {
                number: 4,
                context: "Entre Cap√≠tulos 6 y 7 - Camino al Laberinto de Tejones",
                question: "El grupo necesita provisiones e informaci√≥n antes del peligroso laberinto. ¬øD√≥nde buscar ayuda?",
                optionA: "Colonia de Ara√±as Tejedoras del Destino (cobran en secretos)",
                optionB: "Pueblo de los Conejos Herbolarios (pac√≠ficos pero vulnerables)",
                impact: "Determina el nivel de preparaci√≥n para el enfrentamiento final y las consecuencias morales."
            },
            5: {
                number: 5,
                context: "Cap√≠tulo 8 - Momento crucial con las L√°grimas de Luna",
                question: "Axel tiene las L√°grimas de Luna en sus manos. El esp√≠ritu de su padre le susurra consejos. ¬øQu√© elige?",
                optionA: "Usar las L√°grimas para curar a la madre de Seraphina",
                optionB: "Confrontar a Seraphina primero, luego decidir",
                impact: "Determina el tipo de redenci√≥n (inmediata vs. gradual) y el desarrollo del ep√≠logo."
            }
        };

        return decisionsData[decisionNumber || this.currentDecision];
    }

    // Procesar una decisi√≥n del lector
    makeDecision(choice) {
        this.decisions[this.currentDecision] = choice;
        this.saveDecisions();
        
        // Mostrar animaci√≥n de confirmaci√≥n
        this.showDecisionConfirmation(choice);
        
        // Navegar a la siguiente secci√≥n despu√©s de un breve delay
        setTimeout(() => {
            this.navigateToNextSection();
        }, 2000);
    }

    // Mostrar confirmaci√≥n de decisi√≥n
    showDecisionConfirmation(choice) {
        const container = document.getElementById('decision-container');
        const choiceText = choice === 'a' ? 'Opci√≥n A' : 'Opci√≥n B';
        
        container.innerHTML = `
            <div class="decision-confirmation">
                <div class="confirmation-icon">‚ú®</div>
                <h3>Decisi√≥n tomada: ${choiceText}</h3>
                <p>Tu elecci√≥n ha sido registrada. La historia continuar√° seg√∫n tu decisi√≥n...</p>
                <div class="loading-indicator">
                    <div class="loading-bar"></div>
                </div>
            </div>
        `;
    }

    // Navegar a la siguiente secci√≥n seg√∫n las decisiones
    navigateToNextSection() {
        const route = this.calculateRoute();
        const nextPage = this.getNextPageUrl(route);
        
        if (nextPage) {
            window.location.href = nextPage;
        }
    }

    // Calcular la ruta basada en las decisiones
    calculateRoute() {
        const d = this.decisions;
        return d; // Retornar todas las decisiones
    }

    // Obtener URL de la siguiente p√°gina
    getNextPageUrl(decisions) {
        const currentPage = window.location.pathname.split('/').pop();
        
        // Navegaci√≥n basada en la p√°gina actual y las decisiones tomadas
        switch (currentPage) {
            case 'seccion-01.html':
                // Despu√©s de tomar decisiones 1 y 2, navegar a la rama apropiada
                if (decisions[1] && decisions[2]) {
                    const route = decisions[1] + decisions[2];
                    const routeMap = {
                        'aa': 'seccion-01-aa.html',
                        'ab': 'seccion-01-ab.html',
                        'ba': 'seccion-01-ba.html',
                        'bb': 'seccion-01-bb.html'
                    };
                    return routeMap[route];
                }
                break;
                
            case 'seccion-01-aa.html':
            case 'seccion-01-ab.html':
            case 'seccion-01-ba.html':
            case 'seccion-01-bb.html':
                // Navegaci√≥n a decisi√≥n 2B (buscar a Ember)
                if (!decisions["2b"]) {
                    // Mostrar decisi√≥n 2B sobre buscar a Ember
                    return null; // Se manejar√° con setCurrentDecision("2b")
                } else {
                    // Despu√©s de decisi√≥n 2B, ir a la versi√≥n apropiada
                    return decisions["2b"] === 'a' ? 'seccion-02-ember.html' : 'convergencia-cuervos.html';
                }
                
            case 'seccion-02-ember.html':
                // Con Ember, van directamente a convergencia-cuervos
                return 'convergencia-cuervos.html';
                
            case 'convergencia-cuervos.html':
                // Decisi√≥n 3: Confrontaci√≥n vs Espionaje
                if (decisions[3]) {
                    return decisions[3] === 'a' ? 'seccion-02-a.html' : 'seccion-02-b.html';
                }
                break;
                
            case 'seccion-02-a.html':
                // Decisi√≥n 4: Ara√±as vs Conejos
                if (decisions[4]) {
                    // Determinar si Ember est√° presente para elegir la versi√≥n correcta
                    const hasEmber = decisions["2b"] === 'a';
                    if (decisions[4] === 'a') {
                        return hasEmber ? 'seccion-intermedia-ember-a.html' : 'seccion-intermedia-a.html';
                    } else {
                        return hasEmber ? 'seccion-intermedia-ember-b.html' : 'seccion-intermedia-b.html';
                    }
                }
                break;
                
            case 'seccion-02-b.html':
                // Decisi√≥n 4: Ara√±as vs Conejos
                if (decisions[4]) {
                    // Determinar si Ember est√° presente para elegir la versi√≥n correcta
                    const hasEmber = decisions["2b"] === 'a';
                    if (decisions[4] === 'a') {
                        return hasEmber ? 'seccion-intermedia-ember-a.html' : 'seccion-intermedia-a.html';
                    } else {
                        return hasEmber ? 'seccion-intermedia-ember-b.html' : 'seccion-intermedia-b.html';
                    }
                }
                break;
                
            case 'seccion-intermedia-a.html':
            case 'seccion-intermedia-b.html':
                // Sin Ember - van directamente a tejones
                return 'convergencia-tejones.html';
                
            case 'seccion-intermedia-ember-a.html':
            case 'seccion-intermedia-ember-b.html':
                // Con Ember - van a la escena de despedida
                return 'despedida-ember.html';
                
            case 'despedida-ember.html':
                // Despu√©s de la despedida, contin√∫an al laberinto
                return 'convergencia-tejones.html';
                
            case 'convergencia-tejones.html':
                // Decisi√≥n 5: Final
                if (decisions[5]) {
                    return decisions[5] === 'a' ? 'seccion-03-a.html' : 'seccion-03-b.html';
                }
                break;
                
            case 'seccion-03-a.html':
            case 'seccion-03-b.html':
                // Finales - no hay navegaci√≥n adicional
                return null;
        }
        
        return null;
    }

    // Actualizar indicador de progreso
    updateProgressIndicator() {
        const progressContainer = document.getElementById('progress-indicator');
        if (!progressContainer) return;

        const totalDecisions = 6; // Ahora incluye la decisi√≥n 2B sobre Ember
        const madeDecisions = Object.keys(this.decisions).length;
        const progressPercent = (madeDecisions / totalDecisions) * 100;

        progressContainer.innerHTML = `
            <div class="progress-header">
                <span class="progress-title">Progreso de la Historia</span>
                <span class="progress-count">${madeDecisions}/${totalDecisions} decisiones</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${progressPercent}%"></div>
            </div>
            <div class="decisions-summary">
                ${this.getDecisionsSummary()}
            </div>
        `;
    }

    // Obtener resumen de decisiones tomadas con consecuencias
    getDecisionsSummary() {
        const summaryLabels = {
            1: "Confianza inicial",
            2: "Ruta elegida",
            "2b": "Buscar hermano",
            3: "Estrategia revelaci√≥n",
            4: "Preparaci√≥n final",
            5: "Uso de L√°grimas"
        };

        const consequenceLabels = {
            1: { a: "V√≠nculo emocional fuerte", b: "Respeto intelectual" },
            2: { a: "Ventaja en combate directo", b: "Ventaja en revelaci√≥n" },
            "2b": { a: "Ember se une al grupo", b: "Contin√∫a sin Ember" },
            3: { a: "Din√°micas directas", b: "Conocimiento de red completa" },
            4: { a: "M√°xima preparaci√≥n", b: "M√°xima claridad moral" },
            5: { a: "Redenci√≥n inmediata", b: "Redenci√≥n gradual" }
        };

        let summary = '';
        const decisionKeys = [1, 2, "2b", 3, 4, 5];
        
        for (const key of decisionKeys) {
            const decision = this.decisions[key];
            const label = summaryLabels[key];
            if (decision) {
                const consequence = consequenceLabels[key][decision];
                summary += `<div class="decision-summary-item">${label}: ‚úì ${decision.toUpperCase()} <br><span class="consequence">‚Üí ${consequence}</span></div>`;
            } else {
                summary += `<div class="decision-summary-item">${label}: ‚è≥ Pendiente</div>`;
            }
        }

        return summary;
    }

    // Agregar bot√≥n de reinicio
    addResetButton() {
        const resetContainer = document.getElementById('reset-container');
        if (!resetContainer) return;

        resetContainer.innerHTML = `
            <button class="reset-button" onclick="votingSystem.resetStory()">
                üîÑ Reiniciar Historia
            </button>
            <p class="reset-description">
                Explora diferentes decisiones y descubre todos los caminos posibles
            </p>
        `;
    }

    // Reiniciar la historia
    resetStory() {
        const confirmed = confirm('üîÑ ¬øEst√°s seguro de que quieres reiniciar tu historia?\n\n' +
                                'Se perder√°n todas las decisiones tomadas y podr√°s comenzar una nueva aventura ' +
                                'eligiendo diferentes opciones.\n\n' +
                                '¬øContinuar?');
        
        if (confirmed) {
            localStorage.removeItem('cazadorMedianoche_decisions');
            this.decisions = {};
            this.currentDecision = 1;
            
            // Mostrar mensaje de confirmaci√≥n
            this.showResetConfirmation();
            
            setTimeout(() => {
                window.location.href = 'index.html';
            }, 2000);
        }
    }
    
    // Mostrar confirmaci√≥n de reinicio
    showResetConfirmation() {
        const resetContainer = document.getElementById('reset-container');
        if (resetContainer) {
            resetContainer.innerHTML = `
                <div class="reset-confirmation">
                    <div class="confirmation-icon">üîÑ</div>
                    <h3>Historia Reiniciada</h3>
                    <p>Todas las decisiones han sido borradas. Redirigiendo al inicio para comenzar una nueva aventura...</p>
                    <div class="loading-indicator">
                        <div class="loading-bar"></div>
                    </div>
                </div>
            `;
        }
    }
    
    // Funci√≥n global para reinicio r√°pido (sin confirmaci√≥n)
    quickReset() {
        localStorage.removeItem('cazadorMedianoche_decisions');
        this.decisions = {};
        this.currentDecision = 1;
        window.location.href = 'seccion-01.html';
    }

    // Establecer la decisi√≥n actual (llamado desde las p√°ginas)
    setCurrentDecision(decisionNumber) {
        this.currentDecision = decisionNumber;
        this.createDecisionInterface();
    }
}

// Inicializar el sistema cuando se carga la p√°gina
const votingSystem = new VotingSystem();

// Funci√≥n auxiliar para detectar qu√© decisi√≥n mostrar
function initDecisionForPage() {
    const currentPage = window.location.pathname.split('/').pop();
    
    const decisionMap = {
        'seccion-01.html': 1, // Maneja decisiones 1 y 2 secuencialmente
        'seccion-01-aa.html': "2b", // Decisi√≥n sobre buscar a Ember
        'seccion-01-ab.html': "2b", 
        'seccion-01-ba.html': "2b",
        'seccion-01-bb.html': "2b",
        'seccion-02-ember.html': null, // Ya no necesita decisiones, navega directamente
        'convergencia-cuervos.html': 3,
        'seccion-02-a.html': 4,
        'seccion-02-b.html': 4,
        'seccion-intermedia-a.html': null, // Ya no necesita decisiones, navega directamente
        'seccion-intermedia-b.html': null,
        'seccion-intermedia-ember-a.html': null,
        'seccion-intermedia-ember-b.html': null,
        'despedida-ember.html': null,
        'convergencia-tejones.html': 5
    };

    const decisionNumber = decisionMap[currentPage];
    if (decisionNumber) {
        votingSystem.setCurrentDecision(decisionNumber);
    }
}

// Auto-inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', initDecisionForPage);